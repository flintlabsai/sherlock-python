"""Cryptographic and key management helpers for interacting with the Sherlock Domains API"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_keys.ipynb.

# %% auto 0
__all__ = ['Key', 'generate_key', 'load_key']

# %% ../nbs/00_keys.ipynb 4
from cryptography.hazmat.primitives.asymmetric import ed25519
from cryptography.hazmat.primitives import serialization


# %% ../nbs/00_keys.ipynb 6
class Key:
    def __init__(self, 
                 priv_key: ed25519.Ed25519PrivateKey):
        self.priv_key = priv_key
        self.pub_key = priv_key.public_key()

    def public_key(self) -> str:
        return self.pub_key.public_bytes(encoding=serialization.Encoding.Raw, format=serialization.PublicFormat.Raw).hex()
    
    def export(self) -> dict:
        return {
            "private_key_hex": self.priv_key.private_bytes(encoding=serialization.Encoding.Raw, format=serialization.PrivateFormat.Raw, encryption_algorithm=serialization.NoEncryption()).hex(),
            "public_key_hex": self.pub_key.public_bytes(encoding=serialization.Encoding.Raw, format=serialization.PublicFormat.Raw).hex()
        }
    
    def sign(self, message: bytes) -> bytes:
        return self.priv_key.sign(message)
    
    def __str__(self):
        return f"Key(pub_key_hex={self.pub_key.public_bytes(encoding=serialization.Encoding.Raw, format=serialization.PublicFormat.Raw).hex()})"

    def __repr__(self):
        return self.__str__()

# %% ../nbs/00_keys.ipynb 7
def generate_key() -> Key:
    """Generate a new key pair for a client"""
    return Key(ed25519.Ed25519PrivateKey.generate())


# %% ../nbs/00_keys.ipynb 9
def load_key(priv_key_hex: str) -> Key:
    """Load a key pair from an ed25519 hex encoded private key"""
    return Key(ed25519.Ed25519PrivateKey.from_private_bytes(bytes.fromhex(priv_key_hex)))
